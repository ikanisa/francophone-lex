name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      SUPABASE_DB_URL: postgres://postgres:postgres@localhost:5432/postgres
      SUPABASE_URL: "${{ secrets.SUPABASE_URL || 'https://example.supabase.co' }}"
      SUPABASE_SERVICE_ROLE_KEY: "${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'service' }}"
      OPS_ORG_ID: "${{ secrets.OPS_ORG_ID || '00000000-0000-0000-0000-000000000000' }}"
      GO_NO_GO_ENFORCE: '1'
    services:
      postgres:
        image: ankane/pgvector:0.5.1
        env:
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Secret scan (gitleaks)
        uses: gitleaks/gitleaks-action@v2

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.43.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm lint

      - name: Run typecheck
        run: pnpm typecheck

      - name: Run migrations
        run: pnpm db:migrate
        env:
          SUPABASE_DB_URL: ${{ env.SUPABASE_DB_URL }}

      - name: Smoke test RLS guards
        run: pnpm ops:rls-smoke
        env:
          SUPABASE_DB_URL: ${{ env.SUPABASE_DB_URL }}

      - name: Run environment conformance check
        run: pnpm ops:check -- --ci
        env:
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ env.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_DB_URL: ${{ env.SUPABASE_DB_URL }}
          OPENAI_API_KEY: test
          OPENAI_VECTOR_STORE_AUTHORITIES_ID: vs_test
          OPS_CHECK_DRY_RUN: '1'
          VECTOR_STORE_DRY_RUN: '1'

      - name: Run tests
        run: pnpm test
        env:
          OPENAI_API_KEY: test
          AGENT_MODEL: gpt-test
          EMBEDDING_MODEL: text-embedding-test
          OPENAI_VECTOR_STORE_AUTHORITIES_ID: vs_test
          SUPABASE_URL: https://example.supabase.co
          SUPABASE_SERVICE_ROLE_KEY: service

      - name: Enforce Go / No-Go checklist
        if: env.GO_NO_GO_ENFORCE == '1'
        run: |
          set -e
          CMD="pnpm ops:go-no-go --require-go"
          if [ -n "${GO_NO_GO_RELEASE}" ]; then
            CMD="$CMD --release ${GO_NO_GO_RELEASE}"
          fi
          $CMD
        env:
          OPS_ORG_ID: ${{ env.OPS_ORG_ID }}
          SUPABASE_URL: ${{ env.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ env.SUPABASE_SERVICE_ROLE_KEY }}
          GO_NO_GO_RELEASE: ${{ env.GO_NO_GO_RELEASE }}

      - name: Start API server (stub mode)
        run: |
          PORT=3333 \
          OPENAI_API_KEY=test \
          AGENT_MODEL=mock-stub \
          EMBEDDING_MODEL=text-embedding-test \
          OPENAI_VECTOR_STORE_AUTHORITIES_ID=vs_test \
          SUPABASE_URL=https://example.supabase.co \
          SUPABASE_SERVICE_ROLE_KEY=service \
          AGENT_STUB_MODE=always \
          pnpm --filter @apps/api dev &
          echo $! > api-server.pid
          sleep 5

      - name: Run evaluation harness
        run: pnpm ops:evaluate -- --ci --limit 10
        env:
          API_BASE_URL: http://127.0.0.1:3333
          AGENT_STUB_MODE: always

      - name: Stop API server
        if: always()
        run: |
          if [ -f api-server.pid ]; then
            kill $(cat api-server.pid) || true
          fi
