drop table if exists public.agent_learning_jobs cascade;
drop table if exists public.agent_policy_versions cascade;

create table public.agent_policy_versions (
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references public.organizations(id) on delete cascade,
  version_number bigint generated by default as identity,
  status text not null default 'draft',
  change_set jsonb not null default '[]'::jsonb,
  created_by uuid,
  created_at timestamptz not null default now(),
  approved_by uuid,
  approved_at timestamptz,
  notes text
);

create index if not exists idx_agent_policy_versions_org on public.agent_policy_versions(org_id, version_number desc);

alter table public.agent_policy_versions enable row level security;

drop policy if exists "agent_policy_versions_policy" on public.agent_policy_versions;

create policy "agent_policy_versions_policy" on public.agent_policy_versions
  for all
  using (public.is_org_member(org_id))
  with check (public.is_org_member(org_id));

create table public.agent_learning_jobs (
  id uuid primary key default gen_random_uuid(),
  org_id uuid not null references public.organizations(id) on delete cascade,
  job_type text not null,
  status text not null default 'READY',
  payload jsonb not null default '{}'::jsonb,
  policy_version_id uuid references public.agent_policy_versions(id) on delete set null,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

create index if not exists idx_agent_learning_jobs_org on public.agent_learning_jobs(org_id, status);

alter table public.agent_learning_jobs enable row level security;

drop policy if exists "agent_learning_jobs_policy" on public.agent_learning_jobs;

create policy "agent_learning_jobs_policy" on public.agent_learning_jobs
  for all
  using (public.is_org_member(org_id))
  with check (public.is_org_member(org_id));

create function public.touch_agent_learning_jobs()
returns trigger
language plpgsql
as $$
begin
  new.updated_at := now();
  return new;
end;
$$;

drop trigger if exists trg_touch_agent_learning_jobs on public.agent_learning_jobs;

create trigger trg_touch_agent_learning_jobs
  before update on public.agent_learning_jobs
  for each row
  execute function public.touch_agent_learning_jobs();
